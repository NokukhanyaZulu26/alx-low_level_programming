!<arch>
0-isupper.c/    0           0     0     644     211       `
#include "main.h"

/**
 * _isupper - Entry point
 * @c: character to be checked
 * Return: 1 uppercase and 0 if otherwise
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	return (0);
}

0-memset.c/     0           0     0     644     291       `
#include "main.h"

/**
 * _memset - Entry point
 * @n: bytes to be changed
 * @b: char to be copied
 * @s: memory tobe filled
 *
 * Return: pointer the memory s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int o;

	for (o = 0; o < n; o++)
	{
		s[o] = b;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     330       `
#include "main.h"

/**
 * _strcat - Entry point
 * @dest: input value
 * @src: source string pointer
 * Return: void
 */
char *_strcat(char *dest, char *src)
{
	int a;
	int b;

	a = 0;
	while (dest[a] != '\0')
	{
		a++;
	}
	b = 0;
	while (src[b] != '\0')
	{
		dest[a] = src[b];
		a++;
		b++;
	}
	dest[a] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     540       `
#include "main.h"

/**
 * _atoi - Entry point
 * @s: pointer to char
 * Return: value of string
 */
int _atoi(char *s)
{
	int k, d, n, len, f, digit;

	k = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;
	while (s[len] != '\0')
		len++;
	while (k < len && f == 0)
	{
		if (s[k] == '-')
			++d;
		if (s[k] >= '0' && s[k] <= '9')
		{
			digit = s[k] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[k + 1] < '0' || s[k + 1] > '9')
				break;
			f = 0;
		}
		k++;
	}
	if (f == 0)
	return (0);
	return (n);
}
1-isdigit.c/    0           0     0     644     225       `
#include "main.h"

/**
 * _isdigit - check if digits are 0 - 9
 * @c: char to be checked
 * Return: 1 for character or 0 for otherwise
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     310       `
#include "main.h"

/**
 * _memcpy - Entry point
 * @dest: stored memory
 * @src: copied memory
 * @n: value
 *
 * Return: copied memory and bytes changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int a = 0;
	int b = n;

	for (; a < b; a++)
	{
		dest[a] = src[a];
		n--;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     374       `
#include "main.h"

/**
 * _strncat - Entry point
 * @dest: input value
 * @src: source string pointer
 * @n: number of bytes
 *
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int e;
	int f;

	e = 0;
	while (dest[e] != '\0')
	{
		e++;
	}
	f = 0;
	while (f < n && src[f] != '\0')
	{
		dest[e] = src[f];
		e++;
		f++;
	}
	dest[e] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     258       `
#include "main.h"

/**
 * _strchr - Entry point
 * @s: string to be searched
 * @c: character to be located
 *
 * Return: 0
 */
char *_strchr(char *s, char c)
{
	int a = 0;

	for (; s[a] >= '\0'; a++)
	{
		if (s[a] == c)
			return (&s[a]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     214       `
#include "main.h"

/**
 * _strlen - Entry point
 * @s: string to be checked
 * Return: length of string
 */
int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
		length++;
		s++;
	}
	return (length);
}
2-strncpy.c/    0           0     0     644     347       `
#include "main.h"

/**
 * _strncpy - Entry point
 * @dest: input value
 * @src: source string pointer
 * @n: number of bytes used
 *
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int x;

	x = 0;
	while (x < n && src[x] != '\0')
	{
		dest[x] = src[x];
		x++;
	}
	while (x < n)
	{
		dest[x] = '\0';
		x++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     223       `
#include "main.h"
/**
 * _islower - Entry point
 *@c: is the char to be checked
 * Return: 1 if char is lower case, otherwise 0
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
		return (0);
}

3-puts.c/       0           0     0     644     207       `
#include "main.h"

/**
 * _puts - Entry point
 * @str: pointer to a char
 * Return: string followed by new line
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str++);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     313       `
#include "main.h"

/**
 *  _strcmp - Entry point
 *  @s1: first string pointer
 *  @s2: second string pointer
 *
 *  Return: s1 - s2
 */
int _strcmp(char *s1, char *s2)
{
	int b;

	b = 0;
	while (s1[b] != '\0' && s2[b] != '\0')
	{
		if (s1[b] != s2[b])
		{
			return (s1[b] - s2[b]);
		}
		b++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     382       `
#include "main.h"

/**
 * _strspn - Entry point
 * @s: string to be searched
 * @accept: input
 *
 * Return: Always 0
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int h;

	while (*s)
	{
		for (h = 0; accept[h]; h++)
		{
			if (*s == accept[h])
			{
				n++;
				break;
			}
			else if (accept[h + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     257       `
#include "main.h"
/**
 * _isalpha - Entry point
 * @c: is the int that will use for the argument of the function
 * Return: 0 (Success)
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
	return (1);
	}
	else
	return (0);
}

4-strpbrk.c/    0           0     0     644     293       `
#include "main.h"

/**
 * _strpbrk - Entry point
 * @s: string to be searched
 * @accept: input
 *
 * Return: always 0
 */
char *_strpbrk(char *s, char *accept)
{
	int p;

	while (*s)
	{
		for (p = 0; accept[p]; p++)
		{
			if (*s == accept[p])
				return (s);
		}
		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     472       `
#include "main.h"

/**
 * _strstr - Entry point
 * @needle: substring to be located
 * @haystack: string to be searched
 *
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	int t;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		t = 0;

		if (haystack[t] == needle[t])
		{
			do {
				if (needle[t + 1] == '\0')
					return (haystack);
				t++;
			} while (haystack[t] == needle[t]);
		}

		haystack++;
	}
	return ('\0');
}
6-abs.c/        0           0     0     644     241       `
#include "main.h"
#include <stdio.h>
/**
 * _abs - Entry point
 * @c:  is the int that will use for the argument of the function
 * Return: 0 (Success)
 */
int _abs(int c)
{
	if (c > 0 || c == 0)
	{
	return (c);
	}
	else
	return (c * -1);
}

9-strcpy.c/     0           0     0     644     269       `
#include "main.h"

/**
 * _strcpy - Entry point
 * @dest: pointer to char
 * @src: pointer to second char
 * Return: pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int b = -1;

	do {
		b++;
		dest[b] = src[b];
	} while (src[b] != '\0');

	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

